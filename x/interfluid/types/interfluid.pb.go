// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/interfluid/interfluid.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InterfluidAssetType indicates whether the interfluid asset is
// a native token itself or the lp share of a pool.
type InterfluidAssetType int32

const (
	InterfluidAssetTypeNative  InterfluidAssetType = 0
	InterfluidAssetTypeLPShare InterfluidAssetType = 1
)

var InterfluidAssetType_name = map[int32]string{
	0: "InterfluidAssetTypeNative",
	1: "InterfluidAssetTypeLPShare",
}

var InterfluidAssetType_value = map[string]int32{
	"InterfluidAssetTypeNative":  0,
	"InterfluidAssetTypeLPShare": 1,
}

func (x InterfluidAssetType) String() string {
	return proto.EnumName(InterfluidAssetType_name, int32(x))
}

func (InterfluidAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a53fc87234ec4b60, []int{0}
}

// InterfluidAsset stores the pair of interfluid asset type and denom pair
type InterfluidAsset struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// AssetType indicates whether the interfluid asset is a native token or an lp
	// share
	AssetType InterfluidAssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=osmosis.interfluid.InterfluidAssetType" json:"asset_type,omitempty"`
}

func (m *InterfluidAsset) Reset()         { *m = InterfluidAsset{} }
func (m *InterfluidAsset) String() string { return proto.CompactTextString(m) }
func (*InterfluidAsset) ProtoMessage()    {}
func (*InterfluidAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53fc87234ec4b60, []int{0}
}
func (m *InterfluidAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidAsset.Merge(m, src)
}
func (m *InterfluidAsset) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidAsset.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidAsset proto.InternalMessageInfo

// InterfluidIntermediaryAccount takes the role of intermediary between LP token
// and OSMO tokens for interfluid staking. The intermediary account is the
// actual account responsible for delegation, not the validator account itself.
type InterfluidIntermediaryAccount struct {
	// Denom indicates the denom of the interfluid asset.
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ValAddr string `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	// perpetual gauge for rewards distribution
	GaugeId uint64 `protobuf:"varint,3,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
}

func (m *InterfluidIntermediaryAccount) Reset()         { *m = InterfluidIntermediaryAccount{} }
func (m *InterfluidIntermediaryAccount) String() string { return proto.CompactTextString(m) }
func (*InterfluidIntermediaryAccount) ProtoMessage()    {}
func (*InterfluidIntermediaryAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53fc87234ec4b60, []int{1}
}
func (m *InterfluidIntermediaryAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidIntermediaryAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidIntermediaryAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidIntermediaryAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidIntermediaryAccount.Merge(m, src)
}
func (m *InterfluidIntermediaryAccount) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidIntermediaryAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidIntermediaryAccount.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidIntermediaryAccount proto.InternalMessageInfo

func (m *InterfluidIntermediaryAccount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *InterfluidIntermediaryAccount) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *InterfluidIntermediaryAccount) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

// The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we
// treat an LP share as having, for all of epoch N. Eventually this is intended
// to be set as the Time-weighted-average-osmo-backing for the entire duration
// of epoch N-1. (Thereby locking whats in use for epoch N as based on the prior
// epochs rewards) However for now, this is not the TWAP but instead the spot
// price at the boundary. For different types of assets in the future, it could
// change.
type OsmoEquivalentMultiplierRecord struct {
	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// interfluid asset denom, can be LP token or native token
	Denom      string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Multiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=multiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multiplier" yaml:"multiplier"`
}

func (m *OsmoEquivalentMultiplierRecord) Reset()         { *m = OsmoEquivalentMultiplierRecord{} }
func (m *OsmoEquivalentMultiplierRecord) String() string { return proto.CompactTextString(m) }
func (*OsmoEquivalentMultiplierRecord) ProtoMessage()    {}
func (*OsmoEquivalentMultiplierRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53fc87234ec4b60, []int{2}
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OsmoEquivalentMultiplierRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsmoEquivalentMultiplierRecord.Merge(m, src)
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Size() int {
	return m.Size()
}
func (m *OsmoEquivalentMultiplierRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OsmoEquivalentMultiplierRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OsmoEquivalentMultiplierRecord proto.InternalMessageInfo

func (m *OsmoEquivalentMultiplierRecord) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *OsmoEquivalentMultiplierRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// InterfluidDelegationRecord is a struct used to indicate interfluid
// delegations of an account in the state machine in a user friendly form.
type InterfluidDelegationRecord struct {
	DelegatorAddress string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress string     `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	DelegationAmount types.Coin `protobuf:"bytes,3,opt,name=delegation_amount,json=delegationAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"delegation_amount"`
}

func (m *InterfluidDelegationRecord) Reset()         { *m = InterfluidDelegationRecord{} }
func (m *InterfluidDelegationRecord) String() string { return proto.CompactTextString(m) }
func (*InterfluidDelegationRecord) ProtoMessage()    {}
func (*InterfluidDelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53fc87234ec4b60, []int{3}
}
func (m *InterfluidDelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidDelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidDelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidDelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidDelegationRecord.Merge(m, src)
}
func (m *InterfluidDelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidDelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidDelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidDelegationRecord proto.InternalMessageInfo

func (m *InterfluidDelegationRecord) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *InterfluidDelegationRecord) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *InterfluidDelegationRecord) GetDelegationAmount() types.Coin {
	if m != nil {
		return m.DelegationAmount
	}
	return types.Coin{}
}

// LockIdIntermediaryAccountConnection is a struct used to indicate the
// relationship between the underlying lock id and interfluid delegation done
// via lp shares.
type LockIdIntermediaryAccountConnection struct {
	LockId              uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	IntermediaryAccount string `protobuf:"bytes,2,opt,name=intermediary_account,json=intermediaryAccount,proto3" json:"intermediary_account,omitempty"`
}

func (m *LockIdIntermediaryAccountConnection) Reset()         { *m = LockIdIntermediaryAccountConnection{} }
func (m *LockIdIntermediaryAccountConnection) String() string { return proto.CompactTextString(m) }
func (*LockIdIntermediaryAccountConnection) ProtoMessage()    {}
func (*LockIdIntermediaryAccountConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53fc87234ec4b60, []int{4}
}
func (m *LockIdIntermediaryAccountConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockIdIntermediaryAccountConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockIdIntermediaryAccountConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockIdIntermediaryAccountConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockIdIntermediaryAccountConnection.Merge(m, src)
}
func (m *LockIdIntermediaryAccountConnection) XXX_Size() int {
	return m.Size()
}
func (m *LockIdIntermediaryAccountConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_LockIdIntermediaryAccountConnection.DiscardUnknown(m)
}

var xxx_messageInfo_LockIdIntermediaryAccountConnection proto.InternalMessageInfo

func (m *LockIdIntermediaryAccountConnection) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

func (m *LockIdIntermediaryAccountConnection) GetIntermediaryAccount() string {
	if m != nil {
		return m.IntermediaryAccount
	}
	return ""
}

type UnpoolWhitelistedPools struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *UnpoolWhitelistedPools) Reset()         { *m = UnpoolWhitelistedPools{} }
func (m *UnpoolWhitelistedPools) String() string { return proto.CompactTextString(m) }
func (*UnpoolWhitelistedPools) ProtoMessage()    {}
func (*UnpoolWhitelistedPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53fc87234ec4b60, []int{5}
}
func (m *UnpoolWhitelistedPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnpoolWhitelistedPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnpoolWhitelistedPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnpoolWhitelistedPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnpoolWhitelistedPools.Merge(m, src)
}
func (m *UnpoolWhitelistedPools) XXX_Size() int {
	return m.Size()
}
func (m *UnpoolWhitelistedPools) XXX_DiscardUnknown() {
	xxx_messageInfo_UnpoolWhitelistedPools.DiscardUnknown(m)
}

var xxx_messageInfo_UnpoolWhitelistedPools proto.InternalMessageInfo

func (m *UnpoolWhitelistedPools) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterEnum("osmosis.interfluid.InterfluidAssetType", InterfluidAssetType_name, InterfluidAssetType_value)
	proto.RegisterType((*InterfluidAsset)(nil), "osmosis.interfluid.InterfluidAsset")
	proto.RegisterType((*InterfluidIntermediaryAccount)(nil), "osmosis.interfluid.InterfluidIntermediaryAccount")
	proto.RegisterType((*OsmoEquivalentMultiplierRecord)(nil), "osmosis.interfluid.OsmoEquivalentMultiplierRecord")
	proto.RegisterType((*InterfluidDelegationRecord)(nil), "osmosis.interfluid.InterfluidDelegationRecord")
	proto.RegisterType((*LockIdIntermediaryAccountConnection)(nil), "osmosis.interfluid.LockIdIntermediaryAccountConnection")
	proto.RegisterType((*UnpoolWhitelistedPools)(nil), "osmosis.interfluid.UnpoolWhitelistedPools")
}

func init() {
	proto.RegisterFile("osmosis/interfluid/interfluid.proto", fileDescriptor_a53fc87234ec4b60)
}

var fileDescriptor_a53fc87234ec4b60 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0x6f, 0x59, 0x04, 0x76, 0x30, 0xba, 0x14, 0xa2, 0xb0, 0x09, 0x2d, 0x96, 0x44, 0x36, 0x18,
	0xda, 0x2c, 0x26, 0x1e, 0xb8, 0x2d, 0xa0, 0x09, 0x09, 0x22, 0xa9, 0x1a, 0x13, 0x2e, 0x9b, 0x69,
	0x67, 0xe8, 0x4e, 0x76, 0xda, 0x29, 0x9d, 0x69, 0x75, 0xbf, 0x01, 0x47, 0x3f, 0x02, 0x89, 0x37,
	0x3f, 0x84, 0x67, 0x8e, 0x1c, 0x8d, 0x07, 0x34, 0x70, 0xf1, 0x66, 0xe2, 0x27, 0x30, 0x9d, 0x76,
	0xbb, 0x15, 0xd6, 0xc4, 0x53, 0xdf, 0x7b, 0xbf, 0xf7, 0x7e, 0xef, 0xef, 0x14, 0xac, 0x32, 0x1e,
	0x30, 0x4e, 0xb8, 0x4d, 0x42, 0x81, 0xe3, 0x63, 0x9a, 0x10, 0x54, 0x11, 0xad, 0x28, 0x66, 0x82,
	0x69, 0x5a, 0xe1, 0x64, 0x8d, 0x90, 0xe6, 0x82, 0xcf, 0x7c, 0x26, 0x61, 0x3b, 0x93, 0x72, 0xcf,
	0xa6, 0xee, 0x33, 0xe6, 0x53, 0x6c, 0x4b, 0xcd, 0x4d, 0x8e, 0x6d, 0x94, 0xc4, 0x50, 0x10, 0x16,
	0x16, 0xb8, 0x71, 0x13, 0x17, 0x24, 0xc0, 0x5c, 0xc0, 0x20, 0x1a, 0x12, 0x78, 0x32, 0x97, 0xed,
	0x42, 0x8e, 0xed, 0xb4, 0xed, 0x62, 0x01, 0xdb, 0xb6, 0xc7, 0x48, 0x41, 0x60, 0x0e, 0xc0, 0xfd,
	0xbd, 0xb2, 0x88, 0x0e, 0xe7, 0x58, 0x68, 0x0b, 0xe0, 0x0e, 0xc2, 0x21, 0x0b, 0x16, 0xd5, 0x15,
	0xb5, 0x55, 0x77, 0x72, 0x45, 0x7b, 0x01, 0x00, 0xcc, 0xe0, 0xae, 0x18, 0x44, 0x78, 0x71, 0x62,
	0x45, 0x6d, 0xdd, 0xdb, 0x5c, 0xb3, 0x6e, 0x37, 0x62, 0xdd, 0xa0, 0x7b, 0x33, 0x88, 0xb0, 0x53,
	0x87, 0x43, 0x71, 0x6b, 0xe6, 0xf4, 0xcc, 0x50, 0x7e, 0x9e, 0x19, 0xaa, 0xd9, 0x07, 0xcb, 0x23,
	0x5f, 0x29, 0x05, 0x18, 0x11, 0x18, 0x0f, 0x3a, 0x9e, 0xc7, 0x92, 0xf0, 0x5f, 0x85, 0x2c, 0x81,
	0x99, 0x14, 0xd2, 0x2e, 0x44, 0x28, 0x96, 0x65, 0xd4, 0x9d, 0xe9, 0x14, 0xd2, 0x0e, 0x42, 0x71,
	0x06, 0xf9, 0x30, 0xf1, 0x71, 0x97, 0xa0, 0xc5, 0xda, 0x8a, 0xda, 0x9a, 0x74, 0xa6, 0xa5, 0xbe,
	0x87, 0xcc, 0x2f, 0x2a, 0xd0, 0x5f, 0xf1, 0x80, 0x3d, 0x3f, 0x49, 0x48, 0x0a, 0x29, 0x0e, 0xc5,
	0xcb, 0x84, 0x0a, 0x12, 0x51, 0x82, 0x63, 0x07, 0x7b, 0x2c, 0x46, 0xda, 0x23, 0x70, 0x17, 0x47,
	0xcc, 0xeb, 0x75, 0xc3, 0x24, 0x70, 0x71, 0x2c, 0xb3, 0xd6, 0x9c, 0x59, 0x69, 0x3b, 0x90, 0xa6,
	0x51, 0x45, 0x13, 0xd5, 0x8a, 0x3c, 0x00, 0x82, 0x92, 0x4c, 0x26, 0xae, 0x6f, 0xef, 0x9c, 0x5f,
	0x1a, 0xca, 0xb7, 0x4b, 0xe3, 0xb1, 0x4f, 0x44, 0x2f, 0x71, 0x2d, 0x8f, 0x05, 0x76, 0xb1, 0x8a,
	0xfc, 0xb3, 0xc1, 0x51, 0xdf, 0xce, 0x66, 0xc9, 0xad, 0x5d, 0xec, 0xfd, 0xbe, 0x34, 0xe6, 0x06,
	0x30, 0xa0, 0x5b, 0xe6, 0x88, 0xc9, 0x74, 0x2a, 0xb4, 0xe6, 0x2f, 0x15, 0x34, 0x47, 0xe3, 0xda,
	0xc5, 0x14, 0xfb, 0xf2, 0x10, 0x8a, 0xe2, 0x9f, 0x80, 0x39, 0x94, 0xdb, 0x58, 0x2c, 0x67, 0x83,
	0x39, 0x2f, 0xe6, 0xd6, 0x28, 0x81, 0x4e, 0x6e, 0xcf, 0x9c, 0x53, 0x48, 0x09, 0xfa, 0xcb, 0x39,
	0x6f, 0xa9, 0x51, 0x02, 0x43, 0xe7, 0xf7, 0x25, 0x33, 0x61, 0x61, 0x17, 0x06, 0xd9, 0x6a, 0x64,
	0x93, 0xb3, 0x9b, 0x4b, 0x56, 0xde, 0x8b, 0x95, 0x5d, 0x97, 0x55, 0x5c, 0x97, 0xb5, 0xc3, 0x48,
	0xb8, 0x6d, 0x67, 0xfd, 0x7f, 0xfe, 0x6e, 0xac, 0xfd, 0x47, 0xff, 0x59, 0x40, 0x59, 0x25, 0x61,
	0x61, 0x47, 0xe6, 0x30, 0x4f, 0xc0, 0xea, 0x3e, 0xf3, 0xfa, 0x7b, 0xe3, 0x6e, 0x63, 0x87, 0x85,
	0x21, 0xf6, 0x32, 0x67, 0xed, 0x21, 0x98, 0xa6, 0xcc, 0xeb, 0x67, 0x3b, 0x57, 0xe5, 0xce, 0xa7,
	0xa8, 0x8c, 0xd2, 0xda, 0x60, 0x81, 0x54, 0x22, 0xbb, 0x30, 0x0f, 0x2d, 0x1a, 0x9d, 0x27, 0xb7,
	0x59, 0xcd, 0x75, 0xf0, 0xe0, 0x6d, 0x18, 0x31, 0x46, 0xdf, 0xf5, 0x88, 0xc0, 0x94, 0x70, 0x81,
	0xd1, 0x21, 0x63, 0x94, 0x6b, 0x0d, 0x50, 0x23, 0x28, 0x9b, 0x68, 0xad, 0x35, 0xe9, 0x64, 0xe2,
	0xfa, 0x11, 0x98, 0x1f, 0x73, 0xea, 0xda, 0x32, 0x58, 0x1a, 0x63, 0x3e, 0x80, 0x82, 0xa4, 0xb8,
	0xa1, 0x68, 0x7a, 0x75, 0x8b, 0x25, 0xbc, 0x7f, 0xf8, 0xba, 0x07, 0x63, 0xdc, 0x50, 0x9b, 0x93,
	0xa7, 0x9f, 0x74, 0x65, 0xfb, 0xf0, 0xfc, 0x4a, 0x57, 0x2f, 0xae, 0x74, 0xf5, 0xc7, 0x95, 0xae,
	0x7e, 0xbc, 0xd6, 0x95, 0x8b, 0x6b, 0x5d, 0xf9, 0x7a, 0xad, 0x2b, 0x47, 0xcf, 0x2a, 0xf3, 0x2c,
	0x1e, 0xdf, 0x06, 0x85, 0x2e, 0x1f, 0x2a, 0x76, 0xda, 0xde, 0xb4, 0x3f, 0x54, 0xff, 0x3e, 0x72,
	0xc6, 0xee, 0x94, 0x7c, 0xee, 0x4f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x53, 0x5a, 0x2f, 0xf6,
	0xa0, 0x04, 0x00, 0x00,
}

func (this *InterfluidAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfluidAsset)
	if !ok {
		that2, ok := that.(InterfluidAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.AssetType != that1.AssetType {
		return false
	}
	return true
}
func (m *InterfluidAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetType != 0 {
		i = encodeVarintInterfluid(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintInterfluid(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterfluidIntermediaryAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidIntermediaryAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidIntermediaryAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GaugeId != 0 {
		i = encodeVarintInterfluid(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintInterfluid(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintInterfluid(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OsmoEquivalentMultiplierRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsmoEquivalentMultiplierRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OsmoEquivalentMultiplierRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintInterfluid(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintInterfluid(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterfluidDelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidDelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidDelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInterfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintInterfluid(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintInterfluid(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockIdIntermediaryAccountConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockIdIntermediaryAccountConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockIdIntermediaryAccountConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IntermediaryAccount) > 0 {
		i -= len(m.IntermediaryAccount)
		copy(dAtA[i:], m.IntermediaryAccount)
		i = encodeVarintInterfluid(dAtA, i, uint64(len(m.IntermediaryAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.LockId != 0 {
		i = encodeVarintInterfluid(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnpoolWhitelistedPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnpoolWhitelistedPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnpoolWhitelistedPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA3 := make([]byte, len(m.Ids)*10)
		var j2 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintInterfluid(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterfluid(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterfluid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfluidAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovInterfluid(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovInterfluid(uint64(m.AssetType))
	}
	return n
}

func (m *InterfluidIntermediaryAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovInterfluid(uint64(l))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovInterfluid(uint64(l))
	}
	if m.GaugeId != 0 {
		n += 1 + sovInterfluid(uint64(m.GaugeId))
	}
	return n
}

func (m *OsmoEquivalentMultiplierRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovInterfluid(uint64(m.EpochNumber))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovInterfluid(uint64(l))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovInterfluid(uint64(l))
	return n
}

func (m *InterfluidDelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovInterfluid(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovInterfluid(uint64(l))
	}
	l = m.DelegationAmount.Size()
	n += 1 + l + sovInterfluid(uint64(l))
	return n
}

func (m *LockIdIntermediaryAccountConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovInterfluid(uint64(m.LockId))
	}
	l = len(m.IntermediaryAccount)
	if l > 0 {
		n += 1 + l + sovInterfluid(uint64(l))
	}
	return n
}

func (m *UnpoolWhitelistedPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovInterfluid(uint64(e))
		}
		n += 1 + sovInterfluid(uint64(l)) + l
	}
	return n
}

func sovInterfluid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterfluid(x uint64) (n int) {
	return sovInterfluid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfluidAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= InterfluidAssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfluidIntermediaryAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidIntermediaryAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidIntermediaryAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsmoEquivalentMultiplierRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsmoEquivalentMultiplierRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsmoEquivalentMultiplierRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfluidDelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidDelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidDelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockIdIntermediaryAccountConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockIdIntermediaryAccountConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockIdIntermediaryAccountConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntermediaryAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntermediaryAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnpoolWhitelistedPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnpoolWhitelistedPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnpoolWhitelistedPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterfluid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterfluid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInterfluid
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInterfluid
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterfluid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterfluid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterfluid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterfluid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterfluid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterfluid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterfluid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterfluid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterfluid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterfluid = fmt.Errorf("proto: unexpected end of group")
)
