// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/interfluid/packet.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterfluidPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*InterfluidPacketData_NoData
	//	*InterfluidPacketData_InterfluidDelegatePacket
	//	*InterfluidPacketData_InterfluidMultiplierPacketData
	Packet isInterfluidPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *InterfluidPacketData) Reset()         { *m = InterfluidPacketData{} }
func (m *InterfluidPacketData) String() string { return proto.CompactTextString(m) }
func (*InterfluidPacketData) ProtoMessage()    {}
func (*InterfluidPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d85e2b51f2f338, []int{0}
}
func (m *InterfluidPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidPacketData.Merge(m, src)
}
func (m *InterfluidPacketData) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidPacketData proto.InternalMessageInfo

type isInterfluidPacketData_Packet interface {
	isInterfluidPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InterfluidPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type InterfluidPacketData_InterfluidDelegatePacket struct {
	InterfluidDelegatePacket *InterfluidDelegatePacketData `protobuf:"bytes,2,opt,name=interfluidDelegatePacket,proto3,oneof" json:"interfluidDelegatePacket,omitempty"`
}
type InterfluidPacketData_InterfluidMultiplierPacketData struct {
	InterfluidMultiplierPacketData *InterfluidMultiplierPacketData `protobuf:"bytes,3,opt,name=interfluidMultiplierPacketData,proto3,oneof" json:"interfluidMultiplierPacketData,omitempty"`
}

func (*InterfluidPacketData_NoData) isInterfluidPacketData_Packet()                         {}
func (*InterfluidPacketData_InterfluidDelegatePacket) isInterfluidPacketData_Packet()       {}
func (*InterfluidPacketData_InterfluidMultiplierPacketData) isInterfluidPacketData_Packet() {}

func (m *InterfluidPacketData) GetPacket() isInterfluidPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *InterfluidPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*InterfluidPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *InterfluidPacketData) GetInterfluidDelegatePacket() *InterfluidDelegatePacketData {
	if x, ok := m.GetPacket().(*InterfluidPacketData_InterfluidDelegatePacket); ok {
		return x.InterfluidDelegatePacket
	}
	return nil
}

func (m *InterfluidPacketData) GetInterfluidMultiplierPacketData() *InterfluidMultiplierPacketData {
	if x, ok := m.GetPacket().(*InterfluidPacketData_InterfluidMultiplierPacketData); ok {
		return x.InterfluidMultiplierPacketData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InterfluidPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InterfluidPacketData_NoData)(nil),
		(*InterfluidPacketData_InterfluidDelegatePacket)(nil),
		(*InterfluidPacketData_InterfluidMultiplierPacketData)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d85e2b51f2f338, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// InterfluidDelegatePacketData defines a struct for the packet
// payload
type InterfluidDelegatePacketData struct {
	DelegatorAddress string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress string     `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	DelegationAmount types.Coin `protobuf:"bytes,3,opt,name=delegation_amount,json=delegationAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"delegation_amount"`
}

func (m *InterfluidDelegatePacketData) Reset()         { *m = InterfluidDelegatePacketData{} }
func (m *InterfluidDelegatePacketData) String() string { return proto.CompactTextString(m) }
func (*InterfluidDelegatePacketData) ProtoMessage()    {}
func (*InterfluidDelegatePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d85e2b51f2f338, []int{2}
}
func (m *InterfluidDelegatePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidDelegatePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidDelegatePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidDelegatePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidDelegatePacketData.Merge(m, src)
}
func (m *InterfluidDelegatePacketData) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidDelegatePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidDelegatePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidDelegatePacketData proto.InternalMessageInfo

func (m *InterfluidDelegatePacketData) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *InterfluidDelegatePacketData) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *InterfluidDelegatePacketData) GetDelegationAmount() types.Coin {
	if m != nil {
		return m.DelegationAmount
	}
	return types.Coin{}
}

// InterfluidDelegatePacketAck defines a struct for the packet
// acknowledgment
type InterfluidDelegatePacketAck struct {
}

func (m *InterfluidDelegatePacketAck) Reset()         { *m = InterfluidDelegatePacketAck{} }
func (m *InterfluidDelegatePacketAck) String() string { return proto.CompactTextString(m) }
func (*InterfluidDelegatePacketAck) ProtoMessage()    {}
func (*InterfluidDelegatePacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d85e2b51f2f338, []int{3}
}
func (m *InterfluidDelegatePacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidDelegatePacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidDelegatePacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidDelegatePacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidDelegatePacketAck.Merge(m, src)
}
func (m *InterfluidDelegatePacketAck) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidDelegatePacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidDelegatePacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidDelegatePacketAck proto.InternalMessageInfo

// InterfluidMultiplierPacketData defines a struct for the packet
// payload
type InterfluidMultiplierPacketData struct {
	EpochNumber int64                                  `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	Denom       string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Multiplier  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=multiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multiplier" yaml:"multiplier"`
}

func (m *InterfluidMultiplierPacketData) Reset()         { *m = InterfluidMultiplierPacketData{} }
func (m *InterfluidMultiplierPacketData) String() string { return proto.CompactTextString(m) }
func (*InterfluidMultiplierPacketData) ProtoMessage()    {}
func (*InterfluidMultiplierPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d85e2b51f2f338, []int{4}
}
func (m *InterfluidMultiplierPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidMultiplierPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidMultiplierPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidMultiplierPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidMultiplierPacketData.Merge(m, src)
}
func (m *InterfluidMultiplierPacketData) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidMultiplierPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidMultiplierPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidMultiplierPacketData proto.InternalMessageInfo

func (m *InterfluidMultiplierPacketData) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *InterfluidMultiplierPacketData) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// InterfluidMultiplierPacketAck defines a struct for the packet
// acknowledgment
type InterfluidMultiplierPacketAck struct {
}

func (m *InterfluidMultiplierPacketAck) Reset()         { *m = InterfluidMultiplierPacketAck{} }
func (m *InterfluidMultiplierPacketAck) String() string { return proto.CompactTextString(m) }
func (*InterfluidMultiplierPacketAck) ProtoMessage()    {}
func (*InterfluidMultiplierPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d85e2b51f2f338, []int{5}
}
func (m *InterfluidMultiplierPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfluidMultiplierPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfluidMultiplierPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfluidMultiplierPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfluidMultiplierPacketAck.Merge(m, src)
}
func (m *InterfluidMultiplierPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *InterfluidMultiplierPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfluidMultiplierPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_InterfluidMultiplierPacketAck proto.InternalMessageInfo

func init() {
	proto.RegisterType((*InterfluidPacketData)(nil), "osmosis.v12.interfluid.InterfluidPacketData")
	proto.RegisterType((*NoData)(nil), "osmosis.v12.interfluid.NoData")
	proto.RegisterType((*InterfluidDelegatePacketData)(nil), "osmosis.v12.interfluid.InterfluidDelegatePacketData")
	proto.RegisterType((*InterfluidDelegatePacketAck)(nil), "osmosis.v12.interfluid.InterfluidDelegatePacketAck")
	proto.RegisterType((*InterfluidMultiplierPacketData)(nil), "osmosis.v12.interfluid.InterfluidMultiplierPacketData")
	proto.RegisterType((*InterfluidMultiplierPacketAck)(nil), "osmosis.v12.interfluid.InterfluidMultiplierPacketAck")
}

func init() { proto.RegisterFile("osmosis/interfluid/packet.proto", fileDescriptor_23d85e2b51f2f338) }

var fileDescriptor_23d85e2b51f2f338 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x4e, 0x3a, 0x51, 0x6d, 0x1e, 0x07, 0x16, 0x55, 0xa8, 0x0c, 0xe6, 0x40, 0x0e, 0x80, 0x84,
	0x66, 0xab, 0x05, 0x4d, 0x88, 0x5b, 0xbb, 0x1e, 0xb6, 0x03, 0xd3, 0xd4, 0x23, 0x97, 0xca, 0x71,
	0x4c, 0x67, 0x35, 0xb1, 0xa3, 0xd8, 0x29, 0xec, 0xc6, 0x4f, 0xe0, 0x77, 0xf0, 0x23, 0x38, 0xef,
	0x38, 0x6e, 0x88, 0x43, 0x41, 0xed, 0x2f, 0x80, 0x5f, 0x80, 0x62, 0x67, 0x49, 0x91, 0x96, 0x8d,
	0x53, 0xec, 0xf7, 0xbe, 0xf7, 0x7d, 0xef, 0x7b, 0x79, 0x06, 0xbe, 0x54, 0x89, 0x54, 0x5c, 0x61,
	0x2e, 0x34, 0xcb, 0xde, 0xc7, 0x39, 0x8f, 0x70, 0x4a, 0xe8, 0x8c, 0x69, 0x94, 0x66, 0x52, 0x4b,
	0xef, 0x7e, 0x09, 0x40, 0xf3, 0x5e, 0x1f, 0xd5, 0xa0, 0xdd, 0xce, 0x54, 0x4e, 0xa5, 0x81, 0xe0,
	0xe2, 0x64, 0xd1, 0xbb, 0x90, 0x1a, 0x38, 0x0e, 0x89, 0x62, 0x78, 0xde, 0x0b, 0x99, 0x26, 0x3d,
	0x4c, 0x25, 0x17, 0x36, 0x1f, 0x7c, 0x6b, 0x81, 0xce, 0x71, 0x45, 0x72, 0x6a, 0x84, 0x46, 0x44,
	0x13, 0xef, 0x35, 0x68, 0x0b, 0x59, 0x9c, 0xba, 0xee, 0x63, 0xf7, 0xf9, 0x76, 0x1f, 0xa2, 0xeb,
	0x75, 0xd1, 0x89, 0x41, 0x1d, 0x39, 0xe3, 0x12, 0xef, 0x65, 0xa0, 0x5b, 0xa7, 0x47, 0x2c, 0x66,
	0x53, 0xa2, 0x99, 0x65, 0xee, 0xb6, 0x0c, 0xd7, 0xab, 0x26, 0xae, 0xe3, 0x86, 0xba, 0x52, 0xa1,
	0x91, 0xd7, 0xfb, 0xe4, 0x02, 0x58, 0x27, 0xdf, 0xe6, 0xb1, 0xe6, 0x69, 0xcc, 0x59, 0x56, 0x97,
	0x77, 0x37, 0x8c, 0xf4, 0xc1, 0xed, 0xd2, 0xd7, 0x55, 0x1f, 0x39, 0xe3, 0x5b, 0xf8, 0x87, 0x9b,
	0xa0, 0x6d, 0xff, 0x53, 0xb0, 0x09, 0xda, 0x76, 0x28, 0xc1, 0x6f, 0x17, 0x3c, 0xba, 0xc9, 0x93,
	0xf7, 0x02, 0xec, 0x44, 0x36, 0x2a, 0xb3, 0x09, 0x89, 0xa2, 0x8c, 0x29, 0x65, 0x06, 0xbe, 0x35,
	0xbe, 0x57, 0x25, 0x06, 0x36, 0x5e, 0x80, 0xe7, 0x24, 0xe6, 0xd1, 0x3f, 0xe0, 0x96, 0x05, 0x57,
	0x89, 0x2b, 0xf0, 0x87, 0x8a, 0x99, 0x4b, 0x31, 0x21, 0x89, 0xcc, 0x85, 0x2e, 0x67, 0xf0, 0x00,
	0xd9, 0xa5, 0x40, 0xc5, 0x52, 0xa0, 0x72, 0x29, 0xd0, 0xa1, 0xe4, 0x62, 0x88, 0x2f, 0x16, 0xbe,
	0xf3, 0xe5, 0xa7, 0xff, 0x6c, 0xca, 0xf5, 0x59, 0x1e, 0x22, 0x2a, 0x13, 0x5c, 0x6e, 0x90, 0xfd,
	0xec, 0xab, 0x68, 0x86, 0xf5, 0x79, 0xca, 0x94, 0x29, 0xa8, 0xba, 0xe4, 0x52, 0x0c, 0x8c, 0x46,
	0xb0, 0x07, 0x1e, 0x36, 0x59, 0x1e, 0xd0, 0x59, 0xf0, 0xd5, 0x05, 0xf0, 0xe6, 0x59, 0x7b, 0x4f,
	0xc0, 0x5d, 0x96, 0x4a, 0x7a, 0x36, 0x11, 0x79, 0x12, 0xb2, 0xcc, 0xcc, 0x63, 0x63, 0xbc, 0x6d,
	0x62, 0x27, 0x26, 0xe4, 0x75, 0xc0, 0x9d, 0x88, 0x09, 0x99, 0x94, 0xf6, 0xed, 0xc5, 0xa3, 0x00,
	0x24, 0x15, 0xa1, 0x31, 0xbb, 0x35, 0x3c, 0x2c, 0x1c, 0xfd, 0x58, 0xf8, 0x4f, 0xff, 0xc3, 0xd1,
	0x88, 0xd1, 0x3f, 0x0b, 0x7f, 0xe7, 0x9c, 0x24, 0xf1, 0x9b, 0xa0, 0x66, 0x0a, 0xc6, 0x6b, 0xb4,
	0x81, 0x0f, 0xf6, 0x9a, 0xfb, 0x1f, 0xd0, 0xd9, 0xf0, 0xf4, 0x62, 0x09, 0xdd, 0xcb, 0x25, 0x74,
	0x7f, 0x2d, 0xa1, 0xfb, 0x79, 0x05, 0x9d, 0xcb, 0x15, 0x74, 0xbe, 0xaf, 0xa0, 0xf3, 0xee, 0x60,
	0xad, 0x87, 0x72, 0x0d, 0xf7, 0x63, 0x12, 0xaa, 0xab, 0x0b, 0x9e, 0xf7, 0xfa, 0xf8, 0xe3, 0xfa,
	0xcb, 0x37, 0x7d, 0x85, 0x6d, 0xf3, 0x56, 0x5f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x38, 0xff,
	0xc5, 0xaa, 0x1c, 0x04, 0x00, 0x00,
}

func (m *InterfluidPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfluidPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *InterfluidPacketData_InterfluidDelegatePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidPacketData_InterfluidDelegatePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfluidDelegatePacket != nil {
		{
			size, err := m.InterfluidDelegatePacket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *InterfluidPacketData_InterfluidMultiplierPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidPacketData_InterfluidMultiplierPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfluidMultiplierPacketData != nil {
		{
			size, err := m.InterfluidMultiplierPacketData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InterfluidDelegatePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidDelegatePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidDelegatePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterfluidDelegatePacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidDelegatePacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidDelegatePacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InterfluidMultiplierPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidMultiplierPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidMultiplierPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterfluidMultiplierPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfluidMultiplierPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfluidMultiplierPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfluidPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *InterfluidPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *InterfluidPacketData_InterfluidDelegatePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfluidDelegatePacket != nil {
		l = m.InterfluidDelegatePacket.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *InterfluidPacketData_InterfluidMultiplierPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfluidMultiplierPacketData != nil {
		l = m.InterfluidMultiplierPacketData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InterfluidDelegatePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = m.DelegationAmount.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *InterfluidDelegatePacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InterfluidMultiplierPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovPacket(uint64(m.EpochNumber))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *InterfluidMultiplierPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfluidPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &InterfluidPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfluidDelegatePacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfluidDelegatePacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &InterfluidPacketData_InterfluidDelegatePacket{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfluidMultiplierPacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfluidMultiplierPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &InterfluidPacketData_InterfluidMultiplierPacketData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfluidDelegatePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidDelegatePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidDelegatePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfluidDelegatePacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidDelegatePacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidDelegatePacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfluidMultiplierPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidMultiplierPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidMultiplierPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfluidMultiplierPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfluidMultiplierPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfluidMultiplierPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
